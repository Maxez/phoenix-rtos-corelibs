/*
 * Graph library for DPMI32
 *
 * Test program
 *
 * Copyright 2002-2007 IMMOS
 */

#include <kernel.h>
#include <dos.h>
#include <stdio.h>
#include <stdlib.h>

#include "graph.h"

char cursorAnd[64][8] = {
  {0x7f,0xff,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0x3f,0xff,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0x1f,0xff,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0x0f,0xff,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0x07,0xff,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0x03,0xff,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0x01,0xff,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0x00,0xff,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0x00,0x7f,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0x00,0x3f,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0x00,0x1f,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0x00,0x0f,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0x00,0x07,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0x00,0x03,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0x00,0x7f,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0x00,0x3f,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0x08,0x1f,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0x18,0x1f,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0x3c,0x0f,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0x7c,0x0f,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0xfe,0x07,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0xfe,0x03,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0xff,0x07,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0xff,0x0f,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0xff,0x9f,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,   0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,   0xff,0xff,0xff,0xff},

  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff},
  {0xff,0xff,0xff,0xff,0xff,0xff,0xff,0xff}
};


char cursorXor[64][8] = {
  {0x00,0x00,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x40,0x00,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x60,0x00,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x70,0x00,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x78,0x00,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x7c,0x00,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x7e,0x00,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x7f,0x00,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x7f,0x80,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x7f,0xc0,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x7f,0xe0,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x7f,0xf0,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x7f,0x00,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x7f,0x00,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x77,0x80,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x63,0xc0,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x43,0xc0,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x01,0xe0,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x01,0xe0,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x00,0xf0,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x00,0xf8,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x00,0x70,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x00,0x60,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,   0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,   0x00,0x00,0x00,0x00},

  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00},
  {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x00}
};


int test_logo(u32 w, u32 h, u8 d, int step)
{
  static char *file = "logo.img";
  static char buf[65536];
  static char colors[768];
  int a, c;
  unsigned int rx, ry;
  int x, y, dx, dy;
  FILE *f;

  if (d != 8)
    return -1;

  if ((f = fopen(file, "rb")) == NULL)
    return -1;

  fread(buf, 1, 776, f);
  rx = *(unsigned int *)(buf + 768);
  ry = *(unsigned int *)(buf + 772);
  fread(buf + 776, 1, rx * ry, f);
  fclose(f);
  sleep(1);
  graph_vsync();

  graph_colorget(colors, 0, 255);
  graph_colorset(buf, 0, 255);
//  graph_copyto(buf + 786, graph_addr(2, h - ry), rx - 40, ry, rx, graph_span(), 0);
  graph_copyto(buf + 786, graph_offset(), rx - 40, ry, rx, rx, 0);

  graph_copyin(graph_offset(), graph_addr(step, h - ry - step), rx - 40, ry, rx, graph_span(), 0);

  for (a = 0; a < (w - rx); a += step) {
    while (graph_trigger(), !graph_vsync());
    graph_move(0, h - ry - step, w - step, ry, step, 0, 0);
  }

  for (a = 0; a < (w - rx); a += step) {
    while (graph_trigger(), !graph_vsync());
    graph_move(step, step, w - step, h - step, -step, -step, 0);
  }
  graph_vsync();

  for (a = 0, rx = 1; a < w; a += rx, ++rx) {
    while (graph_trigger(), !graph_vsync());
    graph_move(0, 0, w - rx, h, rx, 0, 0);
  }

  graph_colorset(colors, 0, 255);
  return 0;
}


int test_rectangles(u32 w, u32 h, u8 d, u32 dx, u32 dy, int step)
{
  int a, c;

  // Slow rectangle
  for (a = 0; a < 300; ++a) {
    while (graph_trigger(), !graph_vsync());
    graph_rect(random(w - dx - step * 2) + step,
               random(h - dy - step * 2) + step,
               dx, dy,
               random(1 << d), 0);
  }

  // Fast rectangle
  for (a = 0; a < 100000; ++a) {
    while ((c = graph_trigger()) != GRAPH_SUCCESS)
      if (c == GRAPH_ERR_NESTED)
        break;
      graph_rect(random(w - dx - step * 2) + step,
                 random(h - dy - step * 2) + step,
                 dx, dy,
                 random(1 << d), 0);
  }

  // Move
  for (a = 0; a < w; a += step) {
    while (graph_trigger(), !graph_vsync());
    graph_move(0, 0, w - step, h, step, 0, 0);
  }

  return 0;
}


int test_lines(u32 w, u32 h, u8 d, u32 dx, u32 dy, int step)
{
  int a, c;

  // Slow lines
  for (a = 0; a < 500; ++a) {
    while (graph_trigger(), !graph_vsync());
    graph_line(random(w - dx - 2 * step) + step, random(h - dx - 2 * step) + step,
               random(dx), random(dy), 1, random(1 << d), 0);
  }

  // Fast lines
  for (a = 0; a < 100000; ++a) {
    while ((c = graph_trigger()) != GRAPH_SUCCESS)
      if (c == GRAPH_ERR_NESTED)
        break;
    graph_line(random(w - 2 * dx - 2 * step) + step + dx,
               random(h - 2 * dy - 2 * step) + step + dy,
               random(dx * 2) - dx, random(dy * 2) - dy, 1, random(1 << d), 0);
  }
  sleep(1);

  // Move
//  for (a = 0; a < h; a += step) {
//    while (graph_trigger(), !graph_vsync());
//    while ((c = graph_trigger()) != GRAPH_SUCCESS)
//      if (c == GRAPH_ERR_NESTED)
//        break;
//    graph_move(0, step, w, h - step, 0, -step, 0);
//  }
  return 0;
}


int test_lines2(u32 w, u32 h, u8 d, u32 dx, u32 dy, int step)
{
  int a, c;

  graph_rect(100, 100, w - 199, h - 199, 2, 0);

  // Slow lines
  for (a = 0; a < (h - 199); a += 2) {
    while (graph_trigger(), !graph_vsync());
    graph_line(100, 100 + a, w - 200, h - 200 - a * 2, 1, 100, 0);
  }
  for (a = 0; a < (w - 199); a += 2) {
    while (graph_trigger(), !graph_vsync());
    graph_line(100 + a, h - 100, w - 200 - a * 2, 200 - h, 1, 100, 0);
  }

  while (graph_trigger() != GRAPH_SUCCESS);

  return 0;
}


int test_cursor(u32 w, u32 h, u8 d)
{
  unsigned int n;

  graph_cursorset(cursorAnd[0], cursorXor[0], 0, 1);
  graph_cursorshow();

  for (n = 0; n < h; n++) {
    while (graph_trigger(), !graph_vsync());
    graph_cursorpos(n, n);
  }

  graph_cursorhide();

  return 0;
}


void main()
{
  int c;
  u32 w, h;
  u8 d;

  kernel_init(4096);
  graph_init();

  if ((c = graph_open(102400, -1)) != GRAPH_SUCCESS) {
    printf("Blad inicjalizacji biblioteki graficznej: %d\n", c);
    return;
  }

  w = 1280;
  h = 1024;
  d = 8;

  printf("Test w rozdzielczosci %dx%dx%d\n", w, h, d);
  sleep(3);

  if ((c = graph_mode(GRAPH_1280x1024x8, GRAPH_60Hz)) != GRAPH_SUCCESS) {
    printf("Blad ustawienia biblioteki graficznej: %d\n", c);
    return;
  }

  test_lines(w, h, d, 100, 100, 2);
  test_cursor(w, h, d);
  test_rectangles(w, h, d, 100, 100, 2);
  test_logo(w, h, d, 2);
  sleep(1);
  test_lines2(w, h, d, 100, 100, 2);
  sleep(4);

  graph_close();
  kernel_done();
  printf("Koniec\n");
  return;
}

